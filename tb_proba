LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY tb_proba IS
END ENTITY tb_proba;

ARCHITECTURE behavior OF tb_proba IS

   
    COMPONENT proba
    PORT (
        gmii_rx_clk : IN STD_LOGIC;
	reset : IN STD_LOGIC;
	gmii_rxdv : IN STD_LOGIC;
	gmii_rxd : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	avalon_clk : OUT STD_LOGIC;
	rx_st_data : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
	rx_st_sop : OUT STD_LOGIC;
	rx_st_eop : OUT STD_LOGIC;
	rx_st_empty : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
	rx_st_valid : OUT STD_LOGIC;
	rx_st_ready : IN STD_LOGIC
    );
    END COMPONENT;

SIGNAL gmii_rx_clk : STD_LOGIC := '0';
SIGNAL reset : STD_LOGIC := '1';
SIGNAL gmii_rxdv : STD_LOGIC := '0';
SIGNAL gmii_rxd : STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0');
SIGNAL avalon_clk : STD_LOGIC;
SIGNAL rx_st_data : STD_LOGIC_VECTOR(63 DOWNTO 0);
SIGNAL rx_st_sop : STD_LOGIC;
SIGNAL rx_st_eop :  STD_LOGIC;
SIGNAL rx_st_empty : STD_LOGIC_VECTOR(2 DOWNTO 0);
SIGNAL rx_st_valid : STD_LOGIC;
SIGNAL rx_st_ready : STD_LOGIC := '1';
CONSTANT clk_period : TIME := 10 ns;

BEGIN
uut: proba
    PORT MAP (
        gmii_rx_clk => gmii_rx_clk,
        reset => reset,
        gmii_rxdv => gmii_rxdv,
        gmii_rxd => gmii_rxd,
        avalon_clk => avalon_clk,
        rx_st_data => rx_st_data,
        rx_st_sop => rx_st_sop,
        rx_st_eop => rx_st_eop,
        rx_st_empty => rx_st_empty,
        rx_st_valid => rx_st_valid,
        rx_st_ready => rx_st_ready
    );

clk_process : PROCESS
    BEGIN
        gmii_rx_clk <= '1';
        WAIT FOR clk_period / 2;
        gmii_rx_clk <= '0';
        WAIT FOR clk_period / 2;
    END PROCESS;

stim_proc: PROCESS
    BEGIN
        reset <= '1';
        WAIT FOR 10 ns;
        reset <= '0';
        gmii_rxdv <= '0';
        gmii_rxd <= (OTHERS => '0');
        WAIT FOR 120 ns;

        --tranzicija u RECEIVING_PREAMBLE
        gmii_rxdv <= '1';
	gmii_rxd <= x"55";
	WAIT FOR 70 ns;
        gmii_rxd <= x"D5"; 
        WAIT FOR 10 ns;

        --tranzicija u RECEIVING_DATA - prvi paket
        gmii_rxd <= x"D0"; 
        WAIT FOR 10 ns;
        gmii_rxd <= x"D1"; 
        WAIT FOR 10 ns;
        gmii_rxd <= x"D2"; 
        WAIT FOR 10 ns;
        gmii_rxd <= x"D3";
        WAIT FOR 10 ns;
        gmii_rxd <= x"D4";
        WAIT FOR 10 ns;
        gmii_rxd <= x"D5";
        WAIT FOR 10 ns;
	gmii_rxd <= x"D6";
        WAIT FOR 10 ns;
	gmii_rxd <= x"D7";
        WAIT FOR 10 ns;

        --trazicija u LAST_DATA
        gmii_rxdv <= '0';
        WAIT FOR 90 ns;
        WAIT;
    END PROCESS;
END ARCHITECTURE behavior;